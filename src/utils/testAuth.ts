import { supabase } from '@/integrations/supabase/client';

export async function testDatabasePermissions() {
  console.log('üîç Testando permiss√µes do banco de dados...');
  
  try {
    // Testar se o usu√°rio est√° autenticado
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError) {
      console.error('‚ùå Erro de autentica√ß√£o:', authError);
      return { success: false, error: 'Erro de autentica√ß√£o' };
    }
    
    if (!user) {
      console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado');
      return { success: false, error: 'Usu√°rio n√£o autenticado' };
    }
    
    console.log('‚úÖ Usu√°rio autenticado:', user.id);
    
    // Testar consulta de transa√ß√µes
    const { data: transactions, error: transactionsError } = await supabase
      .from('transactions')
      .select('*')
      .limit(1);
    
    if (transactionsError) {
      console.error('‚ùå Erro ao consultar transa√ß√µes:', transactionsError);
      return { success: false, error: `Erro transa√ß√µes: ${transactionsError.message}` };
    }
    
    console.log('‚úÖ Consulta de transa√ß√µes funcionando');
    
    // Testar consulta de clientes
    const { data: clients, error: clientsError } = await supabase
      .from('clients')
      .select('*')
      .limit(1);
    
    if (clientsError) {
      console.error('‚ùå Erro ao consultar clientes:', clientsError);
      return { success: false, error: `Erro clientes: ${clientsError.message}` };
    }
    
    console.log('‚úÖ Consulta de clientes funcionando');
    
    // Testar consulta de contas
    const { data: accounts, error: accountsError } = await supabase
      .from('accounts')
      .select('*')
      .limit(1);
    
    if (accountsError) {
      console.error('‚ùå Erro ao consultar contas:', accountsError);
      return { success: false, error: `Erro contas: ${accountsError.message}` };
    }
    
    console.log('‚úÖ Consulta de contas funcionando');
    
    console.log('üéâ Todas as permiss√µes est√£o funcionando corretamente!');
    return { success: true };
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
    return { success: false, error: 'Erro geral no teste' };
  }
}

// Fun√ß√£o para verificar se h√° problemas espec√≠ficos com client_id null
export async function testClientIdNull() {
  console.log('üîç Testando problema com client_id null...');
  
  try {
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      return { success: false, error: 'Usu√°rio n√£o autenticado' };
    }
    
    // Tentar inserir uma transa√ß√£o com client_id null
    const testTransaction = {
      user_id: user.id,
      description: 'Teste de autoriza√ß√£o',
      amount: 0.01,
      transaction_type: 'income' as const,
      category: 'Teste',
      transaction_date: new Date().toISOString().split('T')[0],
      account_id: '00000000-0000-0000-0000-000000000000', // ID inv√°lido para teste
      client_id: null
    };
    
    const { error } = await supabase
      .from('transactions')
      .insert([testTransaction]);
    
    if (error) {
      console.log('‚ùå Erro esperado (account_id inv√°lido):', error.message);
      // Se chegou at√© aqui, significa que o problema n√£o √© com client_id null
      return { success: true, message: 'client_id null n√£o √© o problema' };
    }
    
    return { success: true, message: 'Teste passou' };
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    return { success: false, error: 'Erro no teste' };
  }
} 