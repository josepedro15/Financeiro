// =====================================================
// TESTE DIRETO DOS BOT√ïES CLIENTS
// =====================================================

console.log('üéØ TESTE DIRETO DOS BOT√ïES');

// 1. Fun√ß√£o para encontrar bot√µes
function encontrarBotoes() {
    console.log('üîç Procurando bot√µes...');
    
    // Procurar bot√µes de editar
    const botoesEditar = document.querySelectorAll('button[onclick*="handleEdit"], button[onclick*="edit"], .edit-button, [title*="editar"], [title*="edit"]');
    console.log('‚úèÔ∏è Bot√µes de editar encontrados:', botoesEditar.length);
    
    // Procurar bot√µes de deletar
    const botoesDeletar = document.querySelectorAll('button[onclick*="handleDelete"], button[onclick*="delete"], .delete-button, [title*="deletar"], [title*="delete"], [title*="excluir"]');
    console.log('üóëÔ∏è Bot√µes de deletar encontrados:', botoesDeletar.length);
    
    // Procurar bot√µes por texto
    const botoesPorTexto = Array.from(document.querySelectorAll('button')).filter(btn => {
        const texto = btn.textContent?.toLowerCase() || '';
        return texto.includes('editar') || texto.includes('edit') || 
               texto.includes('deletar') || texto.includes('delete') ||
               texto.includes('excluir');
    });
    console.log('üìù Bot√µes por texto encontrados:', botoesPorTexto.length);
    
    return { botoesEditar, botoesDeletar, botoesPorTexto };
}

// 2. Fun√ß√£o para adicionar eventos de teste
function adicionarEventosTeste(botoes, tipo) {
    botoes.forEach((botao, index) => {
        console.log(`üéØ Adicionando evento de teste ao bot√£o ${tipo} ${index + 1}`);
        
        // Adicionar evento de clique
        botao.addEventListener('click', function(e) {
            console.log(`‚úÖ CLIQUE DETECTADO no bot√£o ${tipo} ${index + 1}`);
            console.log('üìç Elemento clicado:', this);
            console.log('üìç Texto do bot√£o:', this.textContent);
            console.log('üìç Classes:', this.className);
            console.log('üìç Evento:', e);
            
            // Mostrar alert
            alert(`Clique detectado no bot√£o ${tipo} ${index + 1}!`);
            
            // N√£o prevenir o comportamento padr√£o para testar
            // e.preventDefault();
        }, true); // Usar capture para pegar o evento primeiro
        
        // Adicionar evento de mousedown
        botao.addEventListener('mousedown', function(e) {
            console.log(`üñ±Ô∏è MOUSEDOWN no bot√£o ${tipo} ${index + 1}`);
        }, true);
        
        // Adicionar evento de mouseup
        botao.addEventListener('mouseup', function(e) {
            console.log(`üñ±Ô∏è MOUSEUP no bot√£o ${tipo} ${index + 1}`);
        }, true);
        
        // Marcar visualmente
        botao.style.border = '2px solid red';
        botao.style.backgroundColor = '#ffebee';
    });
}

// 3. Fun√ß√£o para for√ßar visibilidade dos bot√µes
function forcarVisibilidade() {
    console.log('üëÅÔ∏è For√ßando visibilidade dos bot√µes...');
    
    // Encontrar elementos que podem estar escondendo bot√µes
    const elementosOcultos = document.querySelectorAll('.opacity-0, .invisible, .hidden, [style*="display: none"], [style*="opacity: 0"]');
    console.log('üëª Elementos ocultos encontrados:', elementosOcultos.length);
    
    elementosOcultos.forEach((elemento, index) => {
        console.log(`üëÅÔ∏è Tornando vis√≠vel elemento ${index + 1}:`, elemento);
        elemento.style.opacity = '1';
        elemento.style.visibility = 'visible';
        elemento.style.display = 'block';
        elemento.classList.remove('opacity-0', 'invisible', 'hidden');
    });
}

// 4. Fun√ß√£o para testar cliques program√°ticos
function testarCliquesProgramaticos(botoes, tipo) {
    console.log(`ü§ñ Testando cliques program√°ticos nos bot√µes ${tipo}...`);
    
    botoes.forEach((botao, index) => {
        setTimeout(() => {
            console.log(`ü§ñ Clicando programaticamente no bot√£o ${tipo} ${index + 1}`);
            botao.click();
        }, index * 1000); // Delay de 1 segundo entre cada clique
    });
}

// 5. Fun√ß√£o principal
function executarTesteCompleto() {
    console.log('üöÄ EXECUTANDO TESTE COMPLETO DOS BOT√ïES');
    
    // For√ßar visibilidade
    forcarVisibilidade();
    
    // Encontrar bot√µes
    const { botoesEditar, botoesDeletar, botoesPorTexto } = encontrarBotoes();
    
    // Adicionar eventos de teste
    adicionarEventosTeste(botoesEditar, 'editar');
    adicionarEventosTeste(botoesDeletar, 'deletar');
    adicionarEventosTeste(botoesPorTexto, 'texto');
    
    console.log('‚úÖ Eventos de teste adicionados');
    console.log('üí° Agora clique nos bot√µes para ver se os eventos s√£o detectados');
    console.log('ü§ñ Para testar cliques program√°ticos, use: testarCliquesAutomaticos()');
    
    // Salvar refer√™ncias para uso posterior
    window.botoesTeste = { botoesEditar, botoesDeletar, botoesPorTexto };
}

// 6. Fun√ß√£o para cliques autom√°ticos
window.testarCliquesAutomaticos = function() {
    if (window.botoesTeste) {
        console.log('ü§ñ Iniciando cliques autom√°ticos...');
        testarCliquesProgramaticos(window.botoesTeste.botoesEditar, 'editar');
        setTimeout(() => {
            testarCliquesProgramaticos(window.botoesTeste.botoesDeletar, 'deletar');
        }, 5000);
    } else {
        console.log('‚ùå Execute primeiro: executarTesteCompleto()');
    }
};

// 7. Executar teste automaticamente
console.log('‚è∞ Executando teste em 1 segundo...');
setTimeout(executarTesteCompleto, 1000);

// 8. Fun√ß√£o para executar manualmente
window.testarBotoesDireto = executarTesteCompleto;
console.log('üí° Para executar manualmente, use: testarBotoesDireto()');
